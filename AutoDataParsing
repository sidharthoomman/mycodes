#Goal of this parsing is to pass on an excel file from Vodaphone and then parase a df
# that can be inputed into python modelling
# this script is broken down into 5 main functions
# Function 1- data_parse - runs functions 2-6  inputs the datafile
# Issues : 
# Function 2- data_para inputs datafile and returns Functions 3-6 that pulls out the data
# Function 3 - data_para012 sub function of data_para - inputs data_file from data_para and outputs first two indicators of file
# Function 4- data_para034 subfunction - loads nulls
#Function 5 - data_para5 subfunction -returns correlation values between a particular column 
# Function 6- crop _data - based on input parameters it deletes unnecessary values

# Notes: Need to add a function to adjust column names
# Function needs to have a general passer instead of individual passer
# only run correlation for int files

#file = 'Model2.xlsx', sheet_name='Sheet1'

import numpy
import pandas as pd
def data_parse(file,sheet_name):
    import numpy
    import pandas as pd
    datax = pd.read_excel(file,sheet_name)
    datax_frame = pd.DataFrame(datax)
    data_list = []
    return(datax_frame,data_para012(datax_frame,data_list))    
#QA Notes:
# Problems: 


'''
QA Code: 
datax_frame,data_list=data_parse('Model3.xls', sheet_name='Original_Data')
'''
## data_para is a function that returns the paramets of a data file as data_list

def data_para012(datax_frame,data_list):
    z = 0
    while(z < num_cols):
        y = datax_frame.columns[z]   
        print("Value of z is:", z) # col_index
        print("Value of y is:", y) #col_num
        # manually inputting datatype of a col
        data_list.append([z,y,data[z],0,0,0])# appending column name
        z = z + 1 
    return(data_para34(datax_frame,data_list))


def data_para34(datax_frame,data_list):
    z = 0 # null counter
        x = 0               
        while (x < num_rows):
            y = 0    
                while(y < num_cols):
                    temp = datax_frame[x][y]
                        if datax_frame[x][y] is null:
                            z = z + 1
                            y=y+1
        temp=data_list[x]
        not_null=num_cols-z
        data_list.pop([x])
        data_list.append([temp[0],temp[1],temp[2],z,not_null,0])
        x=x+1
    return(data_para5(datax_frame,data_list)



def data_para5(datax_frame,data_list):
        x=0  # col counter
        y=0  # row counter
        while(x<num_cols):
    
            df=pd.DataFrame(columns = "Y","X")
            while(y<num_rows):
                a = datax_frame[x][1]
                b = data_frame[x][0] 
                dtypea=data_list[x][3] # checking if the datatype of the column is same
                if (a!='' and a!='Nil' and a!='No_data' and a.dtypes=dtypea):
                    if (b!='' and b!='Nil' and b!='No_data' and a.dtypes=dtypea):
                        df.append([a,b])
                s_corr = df.X.str.get_dummies(dummy_na=True)).corrwith(df.Score/df.Score.max())
                temp=data_list[x]
                data_list.pop([x])
                data_list.append([temp[0],temp[1],temp[2],temp[3],temp[4],s_corr])
                x=x+1)
        return(data_list)
  
#Step 4 cleaning up the data: 

#data_list (Column number, name,data_type, data, missing data, correlation with Y) 
#dropping empty columns with less than 25% data
def crop_data(data_frame,data_list,null_factor,cor_factor):
    temp=data_frame
    while (x<n_nrows):
            a_nulls=(data_list[x][3] / num_col) 
            b_corr=data_list[5]
            if (a_nulls < null_factor or b_corr < cor_factor):
                temp.drop(data_list[1],axis=1)
            x=x+1
    return(temp) 

data_list=data_list(temp)
temp=crop_data(data_frame,data_list,.3,.4)
temp=crop_data(data_frame,data_list,.5,.4)
temp=crop_data(data_frame,data_list,.7,.4)
temp=crop_data(data_frame,data_list,.9,.4)
temp=crop_data(data_frame,data_list,1,.4)
data_frame=temp

# sorting and dropping the excel file 
def crop_data(data_frame,data_list):
    x=o
    y=o
    while (x<n_rows):
        x=x+1
        while(y<n_cols):
            y=y+1
            if(data_frame[x][y]=
     
#deleting columns with 
data_list
# counter to check if there are more than 1 datatype
# ------------------------------------------------------------------------ # 
#-------------------------------------------------------------------------#
# CODE JUNKYARD
x=0
y=0
def fun1(y,x):
    return(fun2(y,x))

def fun2(y,x):
    z=[x[0],x[1],x[2]+y[2],x[3]+y[3]]
    x=z
    return(x)

y=[0,1,2,3]
x=[1,0,0,0]
 



            
''' Notes: get dummies converts categorial vairables into dummy variables
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html
s_corr gives another list -so choose the max from it and set the condition
get_dummies prints out dummy values that can be held out for correlation analysis
dummy_na is True 
Score/Score Max gives correlation for dummy values 
'''
